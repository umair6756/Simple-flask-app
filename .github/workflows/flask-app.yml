name: Complete CI/CD Pipeline with Security & Quality Checks

on:
  push:
    branches: [ main ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
    - name:  Checkout Code
      uses: actions/checkout@v4

    - name:  Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name:  Login into DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name:  Build Docker Image from Dockerfile
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest .

    - name:  Scan Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/flask-app:latest'
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true

    # - name: SonarQube Code Analysis
    #   uses: sonarsource/sonarqube-scan-action@master
    #   with:
    #       projectBaseDir: .
    #       args: >
    #          -Dsonar.projectKey=Simple-flask-app
    #          -Dsonar.projectName=Simple-flask-app
    #          -Dsonar.sources=.
    #   env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #       SONAR_HOST_URL: http://localhost:9000


    - name:  OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: "FlaskApp"
        format: "HTML"
        outputDirectory: "owasp-report"

    - name:  Push Docker Image to DockerHub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

  deploy:
    name:  Deploy to Azure Ubuntu VM using NGINX
    runs-on: ubuntu-latest
    needs: build-and-analyze

    steps:
    - name:  Checkout Code
      uses: actions/checkout@v4

    - name:  SSH & Deploy to Azure VM
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_HOST }}
        username: ${{ secrets.AZURE_USER }}
        key: ${{ secrets.AZURE_SSH_KEY }}
        script: |
          echo " Pulling latest Docker image"
          docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

          echo " Running new container"
          docker run -d --name flask-app -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

          echo " Restarting Nginx"
          sudo systemctl restart nginx
